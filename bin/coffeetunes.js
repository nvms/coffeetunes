// Generated by IcedCoffeeScript 108.0.11
(function() {
  var chalk, config, cp, download, download_callback, draw, exitHandler, g, generate_songlist, generate_status_line, get_input, get_trackinfo, get_tracks_from_html, handle_input, iced, main, play, play_callback, player_handle_input, player_input, readline, req, request_options, search, search_callback, util, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  req = require('request');

  util = require('./utilities');

  chalk = require('chalk');

  readline = require('readline');

  cp = require('child_process');

  g = {
    content: null,
    message: null,
    songs: null,
    player_process: null,
    last_played_song: null,
    last_played_index: null
  };

  config = {
    player: 'mplayer',
    playerargs: ['-nolirc', '-prefer-ipv4']
  };

  request_options = {
    encoding: 'utf8',
    method: 'GET',
    uri: null,
    headers: {
      'User-Agent': 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)'
    }
  };

  get_tracks_from_html = function(html) {
    var current_song, f, field_string, field_value, field_value_regx, fields, html_re, index, song, songs, songs_html, _i, _j, _len, _len1, _ref;
    fields = 'duration file_id singer song link rate size source'.split(' ');
    html_re = /<li.(duration[^>]+)>/g;
    _ref = [html.match(html_re), []], songs_html = _ref[0], songs = _ref[1];
    if (songs_html == null) {
      return false;
    }
    for (index = _i = 0, _len = songs_html.length; _i < _len; index = ++_i) {
      song = songs_html[index];
      current_song = {};
      for (_j = 0, _len1 = fields.length; _j < _len1; _j++) {
        f = fields[_j];
        field_value_regx = '="([^"]+)"';
        field_string = f + field_value_regx;
        field_value = song.match(field_string);
        current_song[f] = util.tidy(f, field_value[1]);
      }
      songs.push(current_song);
    }
    g.songs = songs;
    return songs;
  };

  get_trackinfo = function(song, cb) {
    var err, http, res, url, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    url = "http://pleer.com/site_api/files/get_url?action=download&id=" + song.link;
    request_options.uri = url;
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/jonathan/Desktop/coffeetunes/src/coffeetunes.coffee"
        });
        req.get(request_options, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              http = arguments[1];
              return res = arguments[2];
            };
          })(),
          lineno: 46
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (typeof err !== "undefined" && err !== null) {
          console.error(err);
        }
        song.trackinfo = (typeof http !== "undefined" && http !== null ? http.statusCode : void 0) === 200 ? JSON.parse(res) : false;
        if (cb) {
          return cb(song);
        }
      };
    })(this));
  };

  generate_songlist = function(songs) {
    var index, line, line_text, song, str, _i, _len;
    str = chalk.reset('');
    for (index = _i = 0, _len = songs.length; _i < _len; index = ++_i) {
      song = songs[index];
      line_text = "" + (index + 1) + " - " + song.duration + " - " + song.singer + " - " + song.song;
      line = index % 2 === 0 ? chalk.dim(line_text) : chalk.dim(line_text);
      if (g.last_played_index !== null && index === g.last_played_index) {
        line = chalk.reset(line_text);
        line += chalk.reset('');
        g.last_played_index = null;
      }
      str += line + '\n';
    }
    return str;
  };

  search = function(term, cb) {
    var err, http, qs, res, songs, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (!term || term.length < 2) {
      console.error('bad search term');
      if (cb) {
        return cb;
      } else {
        false;
      }
    }
    qs = "http://pleer.com/search?target=tracks&page=1&q=" + term;
    qs = encodeURI(qs);
    request_options.uri = qs;
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/jonathan/Desktop/coffeetunes/src/coffeetunes.coffee"
        });
        req.get(request_options, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              http = arguments[1];
              return res = arguments[2];
            };
          })(),
          lineno: 76
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (typeof err !== "undefined" && err !== null) {
          console.error(err);
        }
        songs = (typeof http !== "undefined" && http !== null ? http.statusCode : void 0) === 200 ? get_tracks_from_html(res) : false;
        if (cb) {
          return cb(songs);
        }
      };
    })(this));
  };

  search_callback = function(data) {
    g.songs = data;
    g.content = generate_songlist(data);
    return g.message = null;
  };

  play = function(song_number, cb) {
    var res, song, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    song = g.songs[song_number - 1];
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/jonathan/Desktop/coffeetunes/src/coffeetunes.coffee"
        });
        get_trackinfo(song, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return res = arguments[0];
            };
          })(),
          lineno: 89
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        song = res;
        g.last_played_index = song_number - 1;
        config.playerargs.push(song.trackinfo.track_link);
        if (g.player_process) {
          g.player_process.kill();
          g.player_process = null;
        }
        g.player_process = cp.spawn(config.player, config.playerargs);
        g.player_process.stdout.on('data', function(data) {});
        g.player_process.stderr.on('data', function(data) {});
        g.player_process.on('close', function(code) {});
        g.last_played_song = song;
        config.playerargs.pop();
        if (cb) {
          return cb(song);
        }
      };
    })(this));
  };

  play_callback = function(song) {
    g.content = generate_songlist(g.songs);
    return g.message = "Playing " + chalk.dim("" + song.singer + " - " + song.song);
  };

  if (g.player_process) {
    console.log('have child process');
    g.player_process.stdin.setEncoding = 'utf8';
    player_input = function(cb) {
      var rl;
      rl = readline.createInterface({
        input: g.player_process.stdin,
        output: g.player_process.stdout
      });
      return rl.question('', function(answer) {
        rl.close();
        return cb(answer);
      });
    };
    player_handle_input = function(input) {
      return console.log("input was " + input);
    };
  }

  generate_status_line = function() {
    return 'maybe I\'ll get to this some day';
  };

  download = function(song_number, cb) {
    var msg, results, song_to_download, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (!g.songs) {
      console.error('invalid range or index given');
    }
    song_to_download = g.songs[song_number - 1];
    msg = "Attempting to download ";
    msg += chalk.dim(("" + song_to_download.singer + " - " + song_to_download.song) + chalk.reset(" .."));
    g.message = msg;
    draw();
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/jonathan/Desktop/coffeetunes/src/coffeetunes.coffee"
        });
        setTimeout(__iced_deferrals.defer({
          lineno: 149
        }), 2000);
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        results = 'Download complete.';
        if (cb) {
          return cb(results);
        }
      };
    })(this));
  };

  download_callback = function(data) {
    return g.message = 'Download complete';
  };

  draw = function() {
    var _i;
    for (_i = 1; _i <= 100; _i++) {
      console.log('\n');
    }
    if (g.content) {
      console.log(g.content);
    }
    if (g.message) {
      return console.log(g.message);
    }
  };

  get_input = function(cb) {
    var rl;
    rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    return rl.question('> ', function(answer) {
      rl.close();
      return cb(answer);
    });
  };

  handle_input = function(input) {
    var found_match, func, handler, matched_input, r, reg, regx, results, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    regx = [[search_callback, search, /(?:search|\.)\s*(.{0,500})/], [download_callback, download, /^(?:d|dl|download)\s*(\d{1,4})$/], [play_callback, play, /^(\d{1,4})$/]];
    found_match = false;
    (function(_this) {
      return (function(__iced_k) {
        var _i, _len, _ref, _results, _while;
        _ref = regx;
        _len = _ref.length;
        _i = 0;
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = __iced_k;
          _continue = function() {
            return iced.trampoline(function() {
              ++_i;
              return _while(__iced_k);
            });
          };
          _next = _continue;
          if (!(_i < _len)) {
            return _break();
          } else {
            reg = _ref[_i];
            handler = reg[0], func = reg[1], r = reg[2];
            (function(__iced_k) {
              if (input.match(r)) {
                found_match = true;
                matched_input = r.exec(input);
                (function(__iced_k) {
                  if (func === play) {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/jonathan/Desktop/coffeetunes/src/coffeetunes.coffee"
                      });
                      func(matched_input[0], __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return results = arguments[0];
                          };
                        })(),
                        lineno: 184
                      }));
                      __iced_deferrals._fulfill();
                    })(__iced_k);
                  } else {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/jonathan/Desktop/coffeetunes/src/coffeetunes.coffee"
                      });
                      func(matched_input[1], __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return results = arguments[0];
                          };
                        })(),
                        lineno: 186
                      }));
                      __iced_deferrals._fulfill();
                    })(__iced_k);
                  }
                })(function() {
                  return __iced_k(handler(results));
                });
              } else {
                return __iced_k();
              }
            })(_next);
          }
        };
        _while(__iced_k);
      });
    })(this)((function(_this) {
      return function() {
        if (!found_match) {
          g.message = 'bad input';
        }
        return main();
      };
    })(this));
  };

  main = function() {
    var ___iced_passed_deferral, __iced_k, _while;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    draw();
    _while = (function(_this) {
      var input, __iced_deferrals;
      return function(__iced_k) {
        var _break, _continue, _next;
        _break = __iced_k;
        _continue = function() {
          return iced.trampoline(function() {
            return _while(__iced_k);
          });
        };
        _next = _continue;
        if (1 !== 1) {
          return _break();
        } else {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/jonathan/Desktop/coffeetunes/src/coffeetunes.coffee"
            });
            get_input(handle_input, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return input = arguments[0];
                };
              })(),
              lineno: 195
            }));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
_break()
            })(_next);
          });
        }
      };
    })(this);
    _while(__iced_k);
  };

  exitHandler = function(options, err) {
    console.log('exit handler called');
    if (options.cleanup) {
      g.content = null;
      g.message = 'goodbye';
      if (g.player_process) {
        g.player_process.kill();
        g.message += chalk.dim(" [" + config.player + " process was alive but has been killed]");
      }
      draw();
    }
    if (err) {
      console.log(err.stack);
    }
    if (options.exit) {
      process.exit();
    }
  };

  readline.emitKeypressEvents(process.stdin);

  process.stdin.setRawMode(true);

  process.stdin.resume();

  process.on('exit', exitHandler.bind(null, {
    cleanup: true
  }));

  process.on('SIGINT', exitHandler.bind(null, {
    exit: true
  }));

  process.on('uncaughtException', exitHandler.bind(null, {
    exit: true
  }));

  process.stdin.on('keypress', function(str, key) {
    if (str.match(/a-zA-Z0-9/)) {
      if (key.ctrl && key.name === 'c') {
        process.exit();
      }
    }
  });

  main();

}).call(this);
